package openGL3;

import java.io.File;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GL2ES2;
import javax.media.opengl.GL3;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;
import javax.vecmath.Matrix3d;
import javax.vecmath.Matrix4d;
import javax.vecmath.Vector3d;

import utils.CST;

import com.jogamp.common.nio.Buffers;
import java.lang.Math;

public class JOGLRenderer implements GLEventListener {
	
	ShaderProgram m_ShaderProgram;
	JDOMHierarchy m_TreeHierarchy;
	FloatBuffer m_Vertices;
	MatrixStack matrixStack;
	int vbo;
	
	public void display(GLAutoDrawable drawable) {
		
		GL3 gl = drawable.getGL().getGL3();
		
		gl.glClearColor(0.f, 0.f, 0.f, 1.0f);
        gl.glClear(GL3.GL_STENCIL_BUFFER_BIT | GL3.GL_COLOR_BUFFER_BIT | GL3.GL_DEPTH_BUFFER_BIT );
        
        gl.glUseProgram(m_ShaderProgram.getProgram());
        
        gl.glEnableVertexAttribArray(0);
        gl.glBindBuffer(GL.GL_ARRAY_BUFFER, m_Vertices);
        gl.glVertexAttribPointer(0, 3, GL3.GL_FLOAT, false, 0, m_Vertices);
        
        gl.glDrawArrays(GL3.GL_POINTS, 0, 2);
        
        /* TEST MATRICES */
        
        
	}

	public void dispose(GLAutoDrawable drawable) {

	}

	public void init(GLAutoDrawable drawable) {
		
		GL3 gl = drawable.getGL().getGL3();
		m_ShaderProgram = new ShaderProgram(drawable, new File("src/shaders/color.vs.glsl"), new File("src/shaders/color.fs.glsl"));
		
		//m_TreeHierarchy = new JDOMHierarchy(new File("src/xml/xml_tree.xml"));
		//m_TreeHierarchy.printXML();
		
		float[] vertices = new float[] { 
        		0.5f, 0.0f, -0.0f, 0.8f, 0.8f, 0.8f,
        		-0.5f, 0.0f, -0.0f, 0.3f, 0.3f, 0.3f
         };
		
		gl.glGenBuffers(1, vbo, 0);
		m_Vertices = Buffers.newDirectFloatBuffer(vertices);
        
	}

	public void reshape(GLAutoDrawable drawable, int arg1, int arg2, int arg3, int arg4) {

	}

	
	
}
