package renderer;

import java.io.File;
import java.util.Iterator;
import java.util.List;

import javax.media.opengl.GL3;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.vecmath.Matrix4f;
import javax.vecmath.Vector3f;

import matrix.GLMatrix;
import matrix.GLMatrixTransform;
import matrix.MatrixStack;

import org.jdom2.Element;

import xml.JDOMHierarchy;
import camera.TrackballCamera;

import dataTree.LeafTreeNode;
import dataTree.PlantsTreeNode;
import dataTree.TrunckTreeNode;

public class JOGLRenderer implements GLEventListener {
	
	JOGLShaderProgram m_ShaderProgram;
	DefaultMutableTreeNode m_TreeRoot;
	
	MatrixStack m_Stack;
	int m_MVPLocation;
	int m_MVLocation;
	int m_PLocation;
	TrackballCamera m_TCamera;
	
	float angle;
	float distance;
	
	public void display(GLAutoDrawable drawable) {
		
		GL3 gl = drawable.getGL().getGL3();
		gl.glClearColor(0.f, 0.f, 0.f, 1.0f);
		gl.glClear(GL3.GL_COLOR_BUFFER_BIT);
		gl.glUseProgram(m_ShaderProgram.getProgram());
		
        m_Stack.push();
        	
        	m_Stack.mult(m_TCamera.getViewMatrix());
        	
        	m_Stack.rotate(new Vector3f(0.0f, 1f, 0.0f),  angle);
        	m_Stack.scale(new Vector3f(1f, 1f, 1f));

        	render(m_TreeRoot, gl);
        	
        	//angle = angle + 0.5f;
    	m_Stack.pop(); 
	}

	public void dispose(GLAutoDrawable drawable) {

	}

	public void init(GLAutoDrawable drawable) {
		
		angle = 0;
		distance = 0;

		GL3 gl = drawable.getGL().getGL3();		
		//gl.glEnable(GL3.GL_DEPTH_TEST);
		gl.glDepthRangef(0.1f, 1000f);
		
		m_ShaderProgram = new JOGLShaderProgram(drawable, new File("src/shaders/color.vs.glsl"), new File("src/shaders/color.fs.glsl"));
		
		m_Stack = new MatrixStack();
		
		Matrix4f P = new Matrix4f(GLMatrixTransform.Perspective(70.0f, 640/(float)640, 0.1f, 1000.0f));
		m_Stack.set(P);
		m_MVPLocation = gl.glGetUniformLocation(m_ShaderProgram.getProgram(), "uniform_MVP");
		m_MVLocation = gl.glGetUniformLocation(m_ShaderProgram.getProgram(), "uniform_MV");
		m_PLocation = gl.glGetUniformLocation(m_ShaderProgram.getProgram(), "uniform_P");
		
		//gl.glUniformMatrix4fv(m_PLocation, 1, false, GLMatrix.parseToFloatArray(P), 0);
		
		m_TCamera = new TrackballCamera();
		
		JDOMHierarchy jdom = new JDOMHierarchy(new File("src/xml/tree.xml"));
		
		PlantsTreeNode root = new TrunckTreeNode();
		
		m_TreeRoot = new DefaultMutableTreeNode(root, true);
		fillTree(jdom.getRoot(), m_TreeRoot);
		
		displayTree(m_TreeRoot);
		
	}

	public void reshape(GLAutoDrawable drawable, int arg1, int arg2, int arg3, int arg4) {

	}

	public void fillTree(Element JDOMelement, DefaultMutableTreeNode tree) {
		
		
		if(!JDOMelement.getChildren().isEmpty()){
			List<Element> childrenList = JDOMelement.getChildren();
			Iterator<Element> itChildren = childrenList.iterator();
			while(itChildren.hasNext()){
				Element JDOMchild = (Element)itChildren.next();
				
				DefaultMutableTreeNode treeChild = null;
				
				switch(JDOMchild.getName()) {
					
					case "trunck" :
						if(JDOMelement.getAttributeValue("radius") != null) { 
						float radp = Float.parseFloat(JDOMelement.getAttributeValue("radius"));
						}
						String axeXYZ = JDOMchild.getAttributeValue("axe");
						String vect[] = axeXYZ.split(" ");
						float x = Float.parseFloat(vect[0]);
						float y = Float.parseFloat(vect[1]);
						float z = Float.parseFloat(vect[2]);
						
						float[] axe = {
								x, y, z
						};
						float rad = Float.parseFloat(JDOMchild.getAttributeValue("radius"));
						
						treeChild = new DefaultMutableTreeNode(new TrunckTreeNode(Float.parseFloat(JDOMchild.getAttributeValue("length")), axe,rad, radp ));
						
					break;
						
					case "leaf" :
						treeChild = new DefaultMutableTreeNode(new LeafTreeNode());
					break;
					
					default :
						System.err.println("Logic error in xml file");
					break;
				}
				
				fillTree(JDOMchild, treeChild);
				tree.add(treeChild);
			}
		}
	}
	
	public void displayTree(DefaultMutableTreeNode tree) {
		System.out.println(tree.getUserObject().toString());
		for(int i = 0; i < tree.getChildCount(); ++i) {
			for(int j = 0; j < tree.getLevel()+1 ; ++j) {
				System.out.print("   ");
			}
			// on caste le résultat de getChildAt qui renvoie un TreeNode et non un DefaultMutableTreeNode
			displayTree((DefaultMutableTreeNode) tree.getChildAt(i)); 
		}
	}
	
	public void render(DefaultMutableTreeNode tree, GL3 gl){
		
		m_Stack.push();
			
			// on caste le résultat de getUserObject car cette fonction renvoie un objet de type Object, et la fonction render n'est une fonction membre que des objets de type PlantsTreeNode
			((PlantsTreeNode)tree.getUserObject()).render(gl, m_Stack, m_MVPLocation);
			m_Stack.translate(new Vector3f(0, ((TrunckTreeNode)tree.getUserObject()).getLength(), 0));
			
			// draw children
			for(int i = 0; i < tree.getChildCount(); ++i) {				
				this.render((DefaultMutableTreeNode) tree.getChildAt(i), gl);
			}
			
		m_Stack.pop();
		
	}
	
	public TrackballCamera getTCamera() {
		return m_TCamera;
	}
}
