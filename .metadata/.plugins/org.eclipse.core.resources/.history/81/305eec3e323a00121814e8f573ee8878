package openGL3;

import java.io.File;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GL2ES2;
import javax.media.opengl.GL3;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;
import javax.vecmath.Matrix3d;
import javax.vecmath.Matrix4d;
import javax.vecmath.Vector3d;

import utils.CST;

import com.jogamp.common.nio.Buffers;
import java.lang.Math;

public class JOGLRenderer implements GLEventListener {
	
	ShaderProgram m_ShaderProgram;
	JDOMHierarchy m_TreeHierarchy;
	float[] m_Vertices;
	MatrixStack matrixStack;
	IntBuffer m_iVbo;
	int[] m_iVao;
	
	public void display(GLAutoDrawable drawable) {
		
		GL2ES2 gl = drawable.getGL().getGL2ES2();
		
		gl.glClearColor(0.f, 0.f, 0.f, 1.0f);
        gl.glClear(GL2ES2.GL_STENCIL_BUFFER_BIT | GL2ES2.GL_COLOR_BUFFER_BIT | GL2ES2.GL_DEPTH_BUFFER_BIT );
        
        gl.glUseProgram(m_ShaderProgram.getProgram());
       
        //gl.glBindBuffer(GL.GL_ARRAY_BUFFER, m_iVbo[0]);
        	//gl.glDrawArrays(GL2ES2.GL_POINTS, 0, 3);
        //gl.glBindBuffer(GL.GL_ARRAY_BUFFER, 0);
        
        /* TEST MATRICES */
        
        
	}

	public void dispose(GLAutoDrawable drawable) {

	}

	public void init(GLAutoDrawable drawable) {
		
		GL gl = drawable.getGL().getGL();
		m_ShaderProgram = new ShaderProgram(drawable, new File("src/shaders/color.vs.glsl"), new File("src/shaders/color.fs.glsl"));
		
		//m_TreeHierarchy = new JDOMHierarchy(new File("src/xml/xml_tree.xml"));
		//m_TreeHierarchy.printXML();
		
		m_Vertices = new float[] { 
        		0.0f, 0.0f, -0.0f,
        		0.5f, 0.5f, -0.0f
         };
		
		gl.glGenBuffers(2, m_iVbo);
		//gl.glBindBuffer(GL3.GL_ARRAY_BUFFER, m_iVbo[0]);
			//FloatBuffer fbVertices = Buffers.newDirectFloatBuffer(m_Vertices);
			//gl.glBufferData(GL.GL_ARRAY_BUFFER, m_Vertices.length, fbVertices, GL.GL_DYNAMIC_DRAW);
		//gl.glBindBuffer(GL3.GL_ARRAY_BUFFER, 0);
		/*
		gl.glGenVertexArrays(1, m_iVao, 0);
		gl.glBindVertexArray(m_iVao[0]);
			gl.glEnableVertexAttribArray(0);
			gl.glBindBuffer(GL.GL_ARRAY_BUFFER, m_iVbo[0]);
				gl.glVertexAttribPointer(0, 3, GL2.GL_FLOAT, false, 0, 0);
			gl.glBindBuffer(GL.GL_ARRAY_BUFFER, 0);
		gl.glBindVertexArray(0);*/
		
		
		matrixStack = new MatrixStack();
		System.out.println(matrixStack.top().toString());
		System.out.println("------------------");
        
	}

	public void reshape(GLAutoDrawable drawable, int arg1, int arg2, int arg3, int arg4) {

	}

	
	
}
