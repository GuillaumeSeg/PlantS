package drawable;

import java.nio.FloatBuffer;
import java.util.ArrayList;

import javax.media.opengl.GL3;

import utils.CST;

//Représente un cylindre ouvert discrétisé dont la base est centrée en (0, 0, 0) (dans son repère local)
//Son axe vertical est (0, 1, 0) et ses axes transversaux sont (1, 0, 0) et (0, 0, 1)
public class Cylinder {

	private ArrayList<VertexShape> m_Vertices; // une liste des points composant la forme
	private int m_NBvertices;
	private static int s_DrawingMode = GL3.GL_TRIANGLE_FAN; // le mode de dessin
	private FloatBuffer m_Buffer; // le buffer contenant les points à envoyer à openGL
    

	public Cylinder(float height, float radius, int discLat, int discHeight) {
		
		// Equation paramétrique en (r, phi, h) du cylindre
        // avec r >= 0, -PI / 2 <= theta <= PI / 2, 0 <= h <= height
        //
        // x(r, phi, h) = r sin(phi)
        // y(r, phi, h) = h
        // z(r, phi, h) = r cos(phi)
        //
        // Discrétisation:
        // dPhi = 2PI / discLat, dH = height / discHeight
        //
        // x(r, i, j) = r * sin(i * dPhi)
        // y(r, i, j) = j * dH
        // z(r, i, j) = r * cos(i * dPhi)
		
		float rcpLat = 1.f / discLat, rcpH = 1.f / discHeight;
        float dPhi = 2 * (float)Math.PI * rcpLat, dH = height * rcpH;
        
        ArrayList<VertexShape> allVertices = new ArrayList<VertexShape>();
        
        // Construit l'ensemble des vertex
        for(int j = 0; j <= discHeight; ++j) {
        	for(int i = 0; i < discLat; ++i) {
        		
                VertexShape v = new VertexShape();
                
                v.texCoord.x = i * rcpLat;
                v.texCoord.y = j * rcpH;
                
                v.normal.x = (float)Math.sin(i * dPhi);
                v.normal.y = 0;
                v.normal.z = (float)Math.cos(i * dPhi);
                
                
                v.position.x = radius * (float)Math.sin(i*dPhi);
                v.position.y = j * dH;
                v.position.z = radius * (float)Math.cos(i * dPhi);
                
                allVertices.add(v);
            }
        }
        m_NBvertices = discLat * discHeight * 6; // *6 car 2 triangles
        
        // Construit les vertex finaux en regroupant les données en triangles:
        // Pour une longitude donnée, les deux triangles formant une face sont de la forme:
        // (i, i + 1, i + discLat + 1), (i, i + discLat + 1, i + discLat)
        
        System.out.println(allVertices.get(0).toString());
        
        for(int j = 0; j <= discHeight; ++j) {
        	System.err.println("hello");
        	int offset = j * discLat;
        	for(int i = 0; i < discLat; ++i) {
        		System.err.println("hello");
        		m_Vertices.add(allVertices.get(offset + i));
        		m_Vertices.add(allVertices.get(offset + i + 1));
        		m_Vertices.add(allVertices.get(offset + i + discLat + 1));
        		m_Vertices.add(allVertices.get(offset + i));
        		m_Vertices.add(allVertices.get(offset + i + discLat + 1));
        		m_Vertices.add(allVertices.get(offset + i + discLat));
                
            }
        }
        System.out.println("hello");
	}
	
	public void draw(GL3 gl) {
		gl.glEnableVertexAttribArray(CST.SHADER_POSITION_LOCATION);        
        gl.glVertexAttribPointer(CST.SHADER_POSITION_LOCATION, 3, GL3.GL_FLOAT, false, 0, m_Buffer);
        gl.glDrawArrays(s_DrawingMode, 0, m_NBvertices);
	}
	
	public float[] getFloatArray() {
		
		float[] vertices = new float[m_NBvertices * VertexShape.s_NB_TOTAL_COMPONENTS];
		int i = 0;
		for(VertexShape v : m_Vertices) {
			vertices[i] = v.position.x;
			++i;
			vertices[i] = v.position.y;
			++i;
			vertices[i] = v.position.z;
			++i;
		}
		
		return vertices;
	}




}
