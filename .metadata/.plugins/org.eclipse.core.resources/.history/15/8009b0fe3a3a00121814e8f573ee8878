package openGL3;

import java.io.File;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GL2ES2;
import javax.media.opengl.GL3;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;
import javax.vecmath.Matrix3d;
import javax.vecmath.Matrix4d;
import javax.vecmath.Vector3d;

import utils.CST;

import com.jogamp.common.nio.Buffers;
import java.lang.Math;

public class JOGLRenderer implements GLEventListener {
	
	ShaderProgram m_ShaderProgram;
	JDOMHierarchy m_TreeHierarchy;
	
	int m_NbVertices;
	FloatBuffer m_VerticesPosition;
	FloatBuffer m_VerticesColor;
	
	MatrixStack m_MatrixStack;
	int m_MVPLocation;
	
	public void display(GLAutoDrawable drawable) {
		
		GL3 gl = drawable.getGL().getGL3();
		
		gl.glClearColor(0.f, 0.f, 0.f, 1.0f);
        gl.glClear(GL3.GL_STENCIL_BUFFER_BIT | GL3.GL_COLOR_BUFFER_BIT | GL3.GL_DEPTH_BUFFER_BIT );
        
        gl.glUseProgram(m_ShaderProgram.getProgram());
        
        gl.glEnableVertexAttribArray(CST.SHADER_POSITION_LOCATION);        
        gl.glVertexAttribPointer(CST.SHADER_POSITION_LOCATION, 3, GL3.GL_FLOAT, false, 0, m_VerticesPosition);
        
        gl.glEnableVertexAttribArray(CST.SHADER_COLOR_LOCATION);        
        gl.glVertexAttribPointer(CST.SHADER_COLOR_LOCATION, 3, GL3.GL_FLOAT, false, 0, m_VerticesColor);
        
        gl.glUniformMatrix4fv(m_MVPLocation, 1, false, m_MatrixStack.parseTopToFloatArray(), 0);
        
        gl.glDrawArrays(GL3.GL_TRIANGLE_FAN, 0, m_NbVertices);
          
	}

	public void dispose(GLAutoDrawable drawable) {

	}

	public void init(GLAutoDrawable drawable) {
		
		GL3 gl = drawable.getGL().getGL3();
		m_ShaderProgram = new ShaderProgram(drawable, new File("src/shaders/color.vs.glsl"), new File("src/shaders/color.fs.glsl"));
		
		//m_TreeHierarchy = new JDOMHierarchy(new File("src/xml/xml_tree.xml"));
		//m_TreeHierarchy.printXML();
		
		m_NbVertices = 4;
		
		float[] verticesPosition = new float[] { 
        		-0.5f, 0.5f, -0.0f,
        		0.5f, 0.5f, -0.0f,
        		0.5f, -0.5f, -0.0f,
        		-0.5f, -0.5f, -0.0f
         };		
		m_VerticesPosition = Buffers.newDirectFloatBuffer(verticesPosition);
		
		float[] verticesColor = new float[] {
				0.2f, 0.2f, 0.2f,
				0.7f, 0.7f, 0.7f,
				0.5f, 0.5f, 0.5f,
				0.2f, 0.2f, 0.2f
		};
		m_VerticesColor = Buffers.newDirectFloatBuffer(verticesColor);
		
		m_MatrixStack = new MatrixStack();
		m_MVPLocation = gl.glGetUniformLocation(m_ShaderProgram.getProgram(), "uniform_MVP");
		
	}

	public void reshape(GLAutoDrawable drawable, int arg1, int arg2, int arg3, int arg4) {

	}

	
	
}
