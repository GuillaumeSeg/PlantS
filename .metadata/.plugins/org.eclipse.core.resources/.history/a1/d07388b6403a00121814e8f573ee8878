package openGL3;
import java.nio.FloatBuffer;
import java.util.Stack;

import javax.vecmath.Matrix3d;
import javax.vecmath.Matrix4f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;

public class MatrixStack {
	
	private Stack<Matrix4f> m_Stack;
	
	// créé une matrice à la base de la pile et l'initialise à Identité
	public MatrixStack() {
		m_Stack = new Stack<Matrix4f>();
		m_Stack.push(new Matrix4f());
		m_Stack.peek().setIdentity();
	}
	
	// Copie la matrice en tête de pile
	public void push() {
		m_Stack.push(top());
	}
	
	// Retire la matrice en tête de pile
	public void pop() {
		m_Stack.pop();
	}
	
	// renvoie la matrice de tête
	public Matrix4f top() {
		return m_Stack.peek();
	}
	
	public void mult(Matrix4f mat){
		top().mul(mat);
	}

	// Modifie la matrice en tête de pile
	public void set(Matrix4f mat){
		top().set(mat);
	}
	
	// Effectue un scale sur la matrice en tête de pile
	public void scale(float s){
		top().setScale(s);
	}
	
	// Effectue une rotation sur la matrice en tête de pile
	public void rotate(Vector3f dir, float angle){
		dir.normalize();
		float cos = (float) Math.cos(angle);
		float sin = (float) Math.sin(angle);
		
		a11 = dir.x*dir.x + (1-dir.x*dir.x)*cos;
		
		Matrix4f matrix = new Matrix4f(a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44);
	}
	
	// Effectue une translation sur la matrice en tête de pile
	public void translate(Vector3f translate){
		top().setTranslation(translate);
	}
	
	public float[] parseTopToFloatArray() {
		int k = 0;
		float[] matrix = new float[16];
		for(int col=0; col<4; ++col) {
			for(int row=0; row<4; ++row) {
				matrix[k] = top().getElement(row, col);
				++k;
			}
		}
		return matrix;
	}

}
